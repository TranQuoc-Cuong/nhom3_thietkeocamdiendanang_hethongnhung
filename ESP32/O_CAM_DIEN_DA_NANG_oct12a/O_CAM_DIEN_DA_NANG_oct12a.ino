#include "arduino_secrets.h"
#include <WiFiManager.h>
#include <strings_en.h>
#include <wm_consts_en.h>
#include <wm_strings_en.h>
#include <wm_strings_es.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/949de201-708e-4976-bfb6-26d96d2563b1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float batbangcuchi;
  float current;
  CloudSmartPlug state;
  int power;
  int voltage;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#define CMD_VOLTAGE "voltage"
#define CMD_CURRENT "current"
#define CMD_LIGHT "light"
#define RXD2 16 
#define TXD2 17 

String dataFromSTM32;

float cmd_handle(const String &str, const String &manhandang) {
    int index = str.indexOf(manhandang);
    if (index != -1) {
        int startIndex = index + manhandang.length() + 1; // Bỏ qua dấu ':'
        int endIndex = str.indexOf(';', startIndex); // Tìm dấu ';'

        if (endIndex == -1) {
            endIndex = str.length(); // Nếu không tìm thấy, đến cuối chuỗi
        }

        String valueString = str.substring(startIndex, endIndex); // Lấy giá trị giữa ':' và ';'
        return valueString.toFloat(); // Chuyển đổi thành số thực
    }
    return NULL; // Trả về 0 nếu không tìm thấy
}

void resetSTM32(){
  pinMode(25, OUTPUT);
  digitalWrite(25, 0);
  delay(1000);
  digitalWrite(25, 1);
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  Serial1.begin(115200, SERIAL_8N1, RXD2, TXD2);
  resetSTM32();
  WiFiManager wm;
  bool res;
  
  res = wm.autoConnect("AutoConnectAP","password"); // password protected ap

  if(!res) {
    Serial.println("Failed to connect");
        // ESP.restart();
  } 
  else {
        //if you get here you have connected to the WiFi    
    Serial.println("connected...yeey :)");
  }
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  if (Serial1.available()) {
        dataFromSTM32 = Serial1.readStringUntil('\n'); // Đọc chuỗi dữ liệu từ Arduino

        voltage = cmd_handle(dataFromSTM32, CMD_VOLTAGE);
        current = cmd_handle(dataFromSTM32, CMD_CURRENT);
        power = voltage * current;
  }
  
}





/*
  Since State is READ_WRITE variable, onStateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStateChange()  {
  // Add your code here to act upon State change
  Serial1.print("light:");
  Serial1.print(state);
  Serial1.println(";");
}

/*
  Since Batbangcuchi is READ_WRITE variable, onBatbangcuchiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBatbangcuchiChange()  {
  if(batbangcuchi > 18)
  {
    state = !state;
    Serial1.print("light:");
    Serial1.print(state);
    Serial1.println(";");
  }
}